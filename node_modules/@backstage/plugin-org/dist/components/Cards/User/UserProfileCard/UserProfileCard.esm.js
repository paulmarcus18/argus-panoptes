import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import { ANNOTATION_EDIT_URL, RELATION_MEMBER_OF } from '@backstage/catalog-model';
import { InfoCard, Link, Avatar } from '@backstage/core-components';
import Box from '@material-ui/core/Box';
import Grid from '@material-ui/core/Grid';
import IconButton from '@material-ui/core/IconButton';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Tooltip from '@material-ui/core/Tooltip';
import { useEntity, getEntityRelations, EntityRefLinks } from '@backstage/plugin-catalog-react';
import Alert from '@material-ui/lab/Alert';
import EditIcon from '@material-ui/icons/Edit';
import EmailIcon from '@material-ui/icons/Email';
import GroupIcon from '@material-ui/icons/Group';
import { LinksGroup } from '../../Meta/LinksGroup.esm.js';
import PersonIcon from '@material-ui/icons/Person';

const CardTitle = (props) => props.title ? /* @__PURE__ */ jsxs(Box, { display: "flex", alignItems: "center", children: [
  /* @__PURE__ */ jsx(PersonIcon, { fontSize: "inherit" }),
  /* @__PURE__ */ jsx(Box, { ml: 1, children: props.title })
] }) : null;
const UserProfileCard = (props) => {
  const { entity: user } = useEntity();
  if (!user) {
    return /* @__PURE__ */ jsx(Alert, { severity: "error", children: "User not found" });
  }
  const entityMetadataEditUrl = user.metadata.annotations?.[ANNOTATION_EDIT_URL];
  const {
    metadata: { name: metaName, description, links },
    spec: { profile }
  } = user;
  const displayName = profile?.displayName ?? metaName;
  const emailHref = profile?.email ? `mailto:${profile.email}` : void 0;
  const memberOfRelations = getEntityRelations(user, RELATION_MEMBER_OF, {
    kind: "Group"
  });
  return /* @__PURE__ */ jsx(
    InfoCard,
    {
      title: /* @__PURE__ */ jsx(CardTitle, { title: displayName }),
      subheader: description,
      variant: props.variant,
      action: /* @__PURE__ */ jsx(Fragment, { children: entityMetadataEditUrl && /* @__PURE__ */ jsx(
        IconButton,
        {
          "aria-label": "Edit",
          title: "Edit Metadata",
          component: Link,
          to: entityMetadataEditUrl,
          children: /* @__PURE__ */ jsx(EditIcon, {})
        }
      ) }),
      children: /* @__PURE__ */ jsxs(Grid, { container: true, spacing: 3, alignItems: "flex-start", children: [
        /* @__PURE__ */ jsx(Grid, { item: true, xs: 12, sm: 2, xl: 1, children: /* @__PURE__ */ jsx(Avatar, { displayName, picture: profile?.picture }) }),
        /* @__PURE__ */ jsx(Grid, { item: true, md: 10, xl: 11, children: /* @__PURE__ */ jsxs(List, { children: [
          profile?.email && /* @__PURE__ */ jsxs(ListItem, { children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(Tooltip, { title: "Email", children: /* @__PURE__ */ jsx(EmailIcon, {}) }) }),
            /* @__PURE__ */ jsx(ListItemText, { children: /* @__PURE__ */ jsx(Link, { to: emailHref ?? "", children: profile.email }) })
          ] }),
          /* @__PURE__ */ jsxs(ListItem, { children: [
            /* @__PURE__ */ jsx(ListItemIcon, { children: /* @__PURE__ */ jsx(Tooltip, { title: "Member of", children: /* @__PURE__ */ jsx(GroupIcon, {}) }) }),
            /* @__PURE__ */ jsx(ListItemText, { children: /* @__PURE__ */ jsx(
              EntityRefLinks,
              {
                entityRefs: memberOfRelations,
                defaultKind: "Group"
              }
            ) })
          ] }),
          props?.showLinks && /* @__PURE__ */ jsx(LinksGroup, { links })
        ] }) })
      ] })
    }
  );
};

export { UserProfileCard };
//# sourceMappingURL=UserProfileCard.esm.js.map
