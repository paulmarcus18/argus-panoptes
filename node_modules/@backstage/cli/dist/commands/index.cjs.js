'use strict';

var index = require('../modules/config/index.cjs.js');
var index$2 = require('../modules/build/index.cjs.js');
var index$6 = require('../modules/start/index.cjs.js');
var index$3 = require('../modules/info/index.cjs.js');
var index$1 = require('../modules/migrate/index.cjs.js');
var index$7 = require('../modules/test/index.cjs.js');
var index$8 = require('../modules/lint/index.cjs.js');
var index$9 = require('../modules/maintenance/index.cjs.js');
var removed = require('../lib/removed.cjs.js');
var index$4 = require('../modules/new/index.cjs.js');
var index$5 = require('../modules/create-github-app/index.cjs.js');

function registerRepoCommand(program) {
  const command = program.command("repo [command]").description("Command that run across an entire Backstage project");
  index$6.registerRepoCommands(command);
  index$2.registerRepoCommands(command);
  index$7.registerRepoCommands(command);
  index$8.registerRepoCommands(command);
  index$9.registerRepoCommands(command);
}
function registerScriptCommand(program) {
  const command = program.command("package [command]").description("Lifecycle scripts for individual packages");
  index$6.registerPackageCommands(command);
  index$2.registerPackageCommands(command);
  index$7.registerPackageCommands(command);
  index$9.registerPackageCommands(command);
  index$8.registerPackageCommands(command);
}
function registerCommands(program) {
  index.registerCommands(program);
  registerRepoCommand(program);
  registerScriptCommand(program);
  index$1.registerCommands(program);
  index$2.registerCommands(program);
  index$3.registerCommands(program);
  index$4.registerCommands(program);
  index$5.registerCommands(program);
  program.command("plugin:diff").allowUnknownOption(true).action(removed.removed("use 'backstage-cli fix' instead"));
  program.command("test").allowUnknownOption(true).action(
    removed.removed(
      "use 'backstage-cli repo test' or 'backstage-cli package test' instead"
    )
  );
  program.command("clean").allowUnknownOption(true).action(removed.removed("use 'backstage-cli package clean' instead"));
  program.command("versions:check").allowUnknownOption(true).action(removed.removed("use 'yarn dedupe' or 'yarn-deduplicate' instead"));
  program.command("install").allowUnknownOption(true).action(removed.removed());
  program.command("onboard").allowUnknownOption(true).action(removed.removed());
}

exports.registerCommands = registerCommands;
exports.registerRepoCommand = registerRepoCommand;
exports.registerScriptCommand = registerScriptCommand;
//# sourceMappingURL=index.cjs.js.map
