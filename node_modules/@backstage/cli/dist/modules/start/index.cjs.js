'use strict';

var lazy = require('../../lib/lazy.cjs.js');
var index = require('../config/index.cjs.js');

function registerRepoCommands(command) {
  command.command("start").description("Starts packages in the repo for local development").argument(
    "[packageNameOrPath...]",
    "Run the specified package instead of the defaults."
  ).option(
    "--plugin <pluginId>",
    "Start the dev entry-point for any matching plugin package in the repo",
    (opt, opts) => opts ? [...opts, opt] : [opt],
    Array()
  ).option(...index.configOption).option(
    "--inspect [host]",
    "Enable debugger in Node.js environments. Applies to backend package only"
  ).option(
    "--inspect-brk [host]",
    "Enable debugger in Node.js environments, breaking before code starts. Applies to backend package only"
  ).option(
    "--require <path...>",
    "Add a --require argument to the node process. Applies to backend package only"
  ).option("--link <path>", "Link an external workspace for module resolution").action(lazy.lazy(() => import('./commands/repo/start.cjs.js'), "command"));
}
function registerPackageCommands(command) {
  command.command("start").description("Start a package for local development").option(...index.configOption).option("--role <name>", "Run the command with an explicit package role").option("--check", "Enable type checking and linting if available").option("--inspect [host]", "Enable debugger in Node.js environments").option(
    "--inspect-brk [host]",
    "Enable debugger in Node.js environments, breaking before code starts"
  ).option(
    "--require <path...>",
    "Add a --require argument to the node process"
  ).option("--link <path>", "Link an external workspace for module resolution").action(lazy.lazy(() => import('./commands/package/start/index.cjs.js'), "command"));
}

exports.registerPackageCommands = registerPackageCommands;
exports.registerRepoCommands = registerRepoCommands;
//# sourceMappingURL=index.cjs.js.map
