import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import LocationOnIcon from '@material-ui/icons/LocationOn';
import { BackButton, ViewComponentButton } from '../Buttons/index.esm.js';
import { EntityListComponent } from '../EntityListComponent/EntityListComponent.esm.js';
import { Link } from '@backstage/core-components';
import partition from 'lodash/partition';
import { DEFAULT_NAMESPACE } from '@backstage/catalog-model';
import { entityRouteRef } from '@backstage/plugin-catalog-react';
import { useRouteRef } from '@backstage/core-plugin-api';

const filterComponentEntity = (newLocations) => {
  for (const location of newLocations) {
    for (const entity of location.entities) {
      if (["component", "api", "resource"].includes(
        entity.kind.toLocaleLowerCase("en-US")
      )) {
        return {
          kind: entity.kind.toLocaleLowerCase("en-US"),
          namespace: entity.namespace?.toLocaleLowerCase("en-US") ?? DEFAULT_NAMESPACE,
          name: entity.name
        };
      }
    }
  }
  return null;
};
const StepFinishImportLocation = ({ prepareResult, onReset }) => {
  const entityRoute = useRouteRef(entityRouteRef);
  if (prepareResult.type === "repository") {
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsxs(Typography, { paragraph: true, children: [
        "The following Pull Request has been opened:",
        " ",
        /* @__PURE__ */ jsx(
          Link,
          {
            to: prepareResult.pullRequest.url,
            target: "_blank",
            rel: "noreferrer",
            children: prepareResult.pullRequest.url
          }
        )
      ] }),
      /* @__PURE__ */ jsx(Typography, { paragraph: true, children: "Your entities will be imported as soon as the Pull Request is merged." }),
      /* @__PURE__ */ jsx(Grid, { container: true, spacing: 0, children: /* @__PURE__ */ jsx(BackButton, { onClick: onReset, children: "Register another" }) })
    ] });
  }
  const [existingLocations, newLocations] = partition(
    prepareResult.locations,
    (l) => l.exists
  );
  const newComponentEntity = filterComponentEntity(newLocations);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    newLocations.length > 0 && /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(Typography, { children: "The following entities have been added to the catalog:" }),
      /* @__PURE__ */ jsx(
        EntityListComponent,
        {
          locations: newLocations,
          locationListItemIcon: () => /* @__PURE__ */ jsx(LocationOnIcon, {}),
          withLinks: true
        }
      )
    ] }),
    existingLocations.length > 0 && /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(Typography, { children: "A refresh was triggered for the following locations:" }),
      /* @__PURE__ */ jsx(
        EntityListComponent,
        {
          locations: existingLocations,
          locationListItemIcon: () => /* @__PURE__ */ jsx(LocationOnIcon, {}),
          withLinks: true
        }
      )
    ] }),
    /* @__PURE__ */ jsxs(Grid, { container: true, spacing: 0, children: [
      newComponentEntity && /* @__PURE__ */ jsx(ViewComponentButton, { to: entityRoute(newComponentEntity), children: "View Component" }),
      /* @__PURE__ */ jsx(BackButton, { onClick: onReset, children: "Register another" })
    ] })
  ] });
};

export { StepFinishImportLocation };
//# sourceMappingURL=StepFinishImportLocation.esm.js.map
