import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { InfoCard } from '@backstage/core-components';
import { useApi, configApiRef } from '@backstage/core-plugin-api';
import Chip from '@material-ui/core/Chip';
import Typography from '@material-ui/core/Typography';
import { catalogImportApiRef } from '../../api/CatalogImportApi.esm.js';
import 'yaml';
import 'git-url-parse';
import '@octokit/rest';
import 'js-base64';
import { useCatalogFilename } from '../../hooks/useCatalogFilename.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { catalogImportTranslationRef } from '../../translation.esm.js';

const ImportInfoCard = (props) => {
  const {
    exampleLocationUrl = "https://github.com/backstage/backstage/blob/master/catalog-info.yaml",
    exampleRepositoryUrl = "https://github.com/backstage/backstage"
  } = props;
  const { t } = useTranslationRef(catalogImportTranslationRef);
  const configApi = useApi(configApiRef);
  const appTitle = configApi.getOptionalString("app.title") || "Backstage";
  const catalogImportApi = useApi(catalogImportApiRef);
  const hasGithubIntegration = configApi.has("integrations.github");
  const catalogFilename = useCatalogFilename();
  return /* @__PURE__ */ jsxs(
    InfoCard,
    {
      title: t("importInfoCard.title"),
      titleTypographyProps: { component: "h3" },
      deepLink: {
        title: "Learn more about the Software Catalog",
        link: "https://backstage.io/docs/features/software-catalog/"
      },
      children: [
        /* @__PURE__ */ jsxs(Typography, { variant: "body2", paragraph: true, children: [
          "Enter the URL to your source code repository to add it to ",
          appTitle,
          "."
        ] }),
        /* @__PURE__ */ jsx(Typography, { component: "h4", variant: "h6", children: "Link to an existing entity file" }),
        /* @__PURE__ */ jsxs(Typography, { variant: "subtitle2", color: "textSecondary", paragraph: true, children: [
          "Example: ",
          /* @__PURE__ */ jsx("code", { children: exampleLocationUrl })
        ] }),
        /* @__PURE__ */ jsxs(Typography, { variant: "body2", paragraph: true, children: [
          "The wizard analyzes the file, previews the entities, and adds them to the ",
          appTitle,
          " catalog."
        ] }),
        hasGithubIntegration && /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsxs(Typography, { component: "h4", variant: "h6", children: [
            "Link to a repository",
            " ",
            /* @__PURE__ */ jsx(Chip, { label: "GitHub only", variant: "outlined", size: "small" })
          ] }),
          /* @__PURE__ */ jsxs(Typography, { variant: "subtitle2", color: "textSecondary", paragraph: true, children: [
            "Example: ",
            /* @__PURE__ */ jsx("code", { children: exampleRepositoryUrl })
          ] }),
          /* @__PURE__ */ jsxs(Typography, { variant: "body2", paragraph: true, children: [
            "The wizard discovers all ",
            /* @__PURE__ */ jsx("code", { children: catalogFilename }),
            " files in the repository, previews the entities, and adds them to the ",
            appTitle,
            " ",
            "catalog."
          ] }),
          catalogImportApi.preparePullRequest && /* @__PURE__ */ jsxs(Typography, { variant: "body2", paragraph: true, children: [
            "If no entities are found, the wizard will prepare a Pull Request that adds an example ",
            /* @__PURE__ */ jsx("code", { children: catalogFilename }),
            " and prepares the ",
            appTitle,
            " catalog to load all entities as soon as the Pull Request is merged."
          ] })
        ] })
      ]
    }
  );
};

export { ImportInfoCard };
//# sourceMappingURL=ImportInfoCard.esm.js.map
