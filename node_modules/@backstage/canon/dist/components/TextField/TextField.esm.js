import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef, useId } from 'react';
import { Input } from '@base-ui-components/react/input';
import { useResponsiveValue } from '../../hooks/useResponsiveValue.esm.js';
import clsx from 'clsx';

const TextField = forwardRef(
  (props, ref) => {
    const {
      className,
      size = "medium",
      label,
      description,
      error,
      required,
      style,
      ...rest
    } = props;
    const responsiveSize = useResponsiveValue(size);
    const inputId = useId();
    const descriptionId = useId();
    const errorId = useId();
    return /* @__PURE__ */ jsxs(
      "div",
      {
        className: clsx("canon-TextField", className),
        style,
        ref,
        children: [
          label && /* @__PURE__ */ jsxs("label", { className: "canon-TextFieldLabel", htmlFor: inputId, children: [
            label,
            required && /* @__PURE__ */ jsx("span", { "aria-hidden": "true", className: "canon-TextFieldRequired", children: "(Required)" })
          ] }),
          /* @__PURE__ */ jsx(
            Input,
            {
              id: inputId,
              className: "canon-TextFieldInput",
              "data-size": responsiveSize,
              "aria-labelledby": label ? inputId : void 0,
              "aria-describedby": clsx({
                [descriptionId]: description,
                [errorId]: error
              }),
              "data-invalid": error,
              required,
              ...rest
            }
          ),
          description && /* @__PURE__ */ jsx("p", { className: "canon-TextFieldDescription", id: descriptionId, children: description }),
          error && /* @__PURE__ */ jsx("p", { className: "canon-TextFieldError", id: errorId, role: "alert", children: error })
        ]
      }
    );
  }
);
TextField.displayName = "TextField";

export { TextField };
//# sourceMappingURL=TextField.esm.js.map
