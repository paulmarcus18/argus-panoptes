'use strict';

var backendPluginApi = require('@backstage/backend-plugin-api');
var DefaultAuditorService = require('./DefaultAuditorService.cjs.js');
var zod = require('zod');
var errors = require('@backstage/errors');

const CONFIG_ROOT_KEY = "backend.auditor";
const severityLogLevelMappingsSchema = zod.z.record(
  zod.z.enum(["low", "medium", "high", "critical"]),
  zod.z.enum(["debug", "info", "warn", "error"])
);
const auditorServiceFactory = backendPluginApi.createServiceFactory({
  service: backendPluginApi.coreServices.auditor,
  deps: {
    config: backendPluginApi.coreServices.rootConfig,
    logger: backendPluginApi.coreServices.logger,
    auth: backendPluginApi.coreServices.auth,
    httpAuth: backendPluginApi.coreServices.httpAuth,
    plugin: backendPluginApi.coreServices.pluginMetadata
  },
  factory({ config, logger, plugin, auth, httpAuth }) {
    const auditLogger = logger.child({ isAuditEvent: true });
    const auditorConfig = config.getOptionalConfig(CONFIG_ROOT_KEY);
    const severityLogLevelMappings = {
      low: auditorConfig?.getOptionalString("severityLogLevelMappings.low") ?? "debug",
      medium: auditorConfig?.getOptionalString("severityLogLevelMappings.medium") ?? "info",
      high: auditorConfig?.getOptionalString("severityLogLevelMappings.high") ?? "info",
      critical: auditorConfig?.getOptionalString("severityLogLevelMappings.critical") ?? "info"
    };
    const res = severityLogLevelMappingsSchema.safeParse(
      severityLogLevelMappings
    );
    if (!res.success) {
      const key = res.error.issues.at(0)?.path.at(0);
      const value = res.error.issues.at(0).received;
      const validKeys = res.error.issues.at(0).options;
      throw new errors.InputError(
        `The configuration value for 'backend.auditor.severityLogLevelMappings.${key}' was given an invalid value: '${value}'. Expected one of the following valid values: '${validKeys.join(
          ", "
        )}'.`
      );
    }
    return DefaultAuditorService.DefaultAuditorService.create(
      (event) => {
        auditLogger[severityLogLevelMappings[event.severityLevel]](
          `${event.plugin}.${event.eventId}`,
          event
        );
      },
      { plugin, auth, httpAuth }
    );
  }
});

exports.auditorServiceFactory = auditorServiceFactory;
//# sourceMappingURL=auditorServiceFactory.cjs.js.map
