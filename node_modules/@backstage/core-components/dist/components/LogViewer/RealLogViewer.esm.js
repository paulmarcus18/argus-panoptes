import { jsx, jsxs } from 'react/jsx-runtime';
import Box from '@material-ui/core/Box';
import IconButton from '@material-ui/core/IconButton';
import CopyIcon from '@material-ui/icons/FileCopy';
import classNames from 'classnames';
import { useState, useMemo, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import AutoSizer from 'react-virtualized-auto-sizer';
import { FixedSizeList } from 'react-window';
import { AnsiProcessor } from './AnsiProcessor.esm.js';
import { LogLine } from './LogLine.esm.js';
import { LogViewerControls } from './LogViewerControls.esm.js';
import { useStyles, HEADER_SIZE } from './styles.esm.js';
import { useLogViewerSearch } from './useLogViewerSearch.esm.js';
import { useLogViewerSelection } from './useLogViewerSelection.esm.js';

function RealLogViewer(props) {
  const classes = useStyles({ classes: props.classes });
  const [fixedListInstance, setFixedListInstance] = useState(null);
  const processor = useMemo(() => new AnsiProcessor(), []);
  const lines = processor.process(props.text);
  const search = useLogViewerSearch(lines);
  const selection = useLogViewerSelection(lines);
  const location = useLocation();
  useEffect(() => {
    if (fixedListInstance) {
      fixedListInstance.scrollToItem(lines.length - 1, "end");
    }
  }, [fixedListInstance, lines]);
  useEffect(() => {
    if (!fixedListInstance) {
      return;
    }
    if (search.resultLine) {
      fixedListInstance.scrollToItem(search.resultLine - 1, "center");
    } else {
      fixedListInstance.scrollToItem(lines.length - 1, "end");
    }
  }, [fixedListInstance, search.resultLine, lines]);
  useEffect(() => {
    if (location.hash) {
      const line = parseInt(location.hash.replace(/\D/g, ""), 10);
      selection.setSelection(line, false);
    }
  }, []);
  const handleSelectLine = (line, event) => {
    selection.setSelection(line, event.shiftKey);
  };
  return /* @__PURE__ */ jsx(AutoSizer, { children: ({ height, width }) => /* @__PURE__ */ jsxs(Box, { style: { width, height }, className: classes.root, children: [
    /* @__PURE__ */ jsx(Box, { className: classes.header, children: /* @__PURE__ */ jsx(LogViewerControls, { ...search }) }),
    /* @__PURE__ */ jsx(
      FixedSizeList,
      {
        ref: (instance) => {
          setFixedListInstance(instance);
        },
        className: classes.log,
        height: (height || 480) - HEADER_SIZE,
        width: width || 640,
        itemData: search.lines,
        itemSize: 20,
        itemCount: search.lines.length,
        children: ({ index, style, data }) => {
          const line = data[index];
          const { lineNumber } = line;
          return /* @__PURE__ */ jsxs(
            Box,
            {
              style: { ...style },
              className: classNames(classes.line, {
                [classes.lineSelected]: selection.isSelected(lineNumber)
              }),
              children: [
                selection.shouldShowButton(lineNumber) && /* @__PURE__ */ jsx(
                  IconButton,
                  {
                    "data-testid": "copy-button",
                    size: "small",
                    className: classes.lineCopyButton,
                    onClick: () => selection.copySelection(),
                    children: /* @__PURE__ */ jsx(CopyIcon, { fontSize: "inherit" })
                  }
                ),
                /* @__PURE__ */ jsx(
                  "a",
                  {
                    role: "row",
                    target: "_self",
                    href: `#line-${lineNumber}`,
                    className: classes.lineNumber,
                    onClick: (event) => handleSelectLine(lineNumber, event),
                    onKeyPress: (event) => handleSelectLine(lineNumber, event),
                    children: lineNumber
                  }
                ),
                /* @__PURE__ */ jsx(
                  LogLine,
                  {
                    line,
                    classes,
                    searchText: search.searchText,
                    highlightResultIndex: search.resultLine === lineNumber ? search.resultLineIndex : void 0
                  }
                )
              ]
            }
          );
        }
      }
    )
  ] }) });
}

export { RealLogViewer };
//# sourceMappingURL=RealLogViewer.esm.js.map
